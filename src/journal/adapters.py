"""
Adapters for converting between different action result formats.

This module provides conversion functions between the enhanced types used by
the Action Agent and the journal-specific types used by the journaling system.
"""

from typing import Optional, Dict, Any, Tuple

from src.core.enhanced_types import EnhancedActionResult
from src.core.types import ActionType
from src.journal.models import JournalActionResult


def enhanced_to_journal_action_result(
    enhanced_result: EnhancedActionResult,
    action_type: Optional[ActionType] = None
) -> JournalActionResult:
    """
    Convert an EnhancedActionResult to a JournalActionResult.
    
    Args:
        enhanced_result: The enhanced action result from Action Agent
        action_type: Optional action type (extracted from test step if not provided)
        
    Returns:
        JournalActionResult compatible with journal system
    """
    # Extract action type from test step if not provided
    if action_type is None:
        action_type = enhanced_result.test_step.action_instruction.action_type
    
    # Determine overall success
    success = enhanced_result.overall_success
    
    # Extract confidence (use AI analysis confidence if available, otherwise coordinate confidence)
    confidence = 0.0
    if enhanced_result.ai_analysis:
        confidence = enhanced_result.ai_analysis.confidence
    elif enhanced_result.coordinates:
        confidence = enhanced_result.coordinates.confidence
    elif enhanced_result.validation:
        confidence = enhanced_result.validation.confidence
    
    # Extract coordinates as tuple
    coordinates: Optional[Tuple[int, int]] = None
    if enhanced_result.coordinates:
        coordinates = enhanced_result.coordinates.grid_coordinates
    
    # Extract grid coordinates as dict (for journal compatibility)
    grid_coordinates: Optional[Dict[str, Any]] = None
    if enhanced_result.coordinates:
        grid_coordinates = {
            "grid_cell": enhanced_result.coordinates.grid_cell,
            "grid_coordinates": enhanced_result.coordinates.grid_coordinates,
            "offset_x": enhanced_result.coordinates.offset_x,
            "offset_y": enhanced_result.coordinates.offset_y,
            "confidence": enhanced_result.coordinates.confidence,
            "refined": enhanced_result.coordinates.refined
        }
        
        # Add refinement details if available
        if enhanced_result.coordinates.refinement_details:
            grid_coordinates["refinement_details"] = enhanced_result.coordinates.refinement_details
    
    # Extract playwright command (would come from scripting system)
    playwright_command: Optional[str] = None
    # Note: This would need to be generated by the script recorder
    # For now, we'll leave it None and let the script recorder handle it
    
    # Extract selectors (would come from element detection)
    selectors: Optional[Dict[str, str]] = None
    # Note: This would need to be extracted from browser interaction
    # For now, we'll leave it None
    
    # Extract input text from test step if it's a type action
    input_text: Optional[str] = None
    if action_type == ActionType.TYPE and enhanced_result.test_step.action_instruction.value:
        input_text = enhanced_result.test_step.action_instruction.value
    
    # Extract element text (not available in current enhanced result)
    element_text: Optional[str] = None
    # Note: This would need to be extracted from the target element
    
    # Extract actual outcome from AI analysis
    actual_outcome: Optional[str] = None
    if enhanced_result.ai_analysis:
        actual_outcome = enhanced_result.ai_analysis.actual_outcome
    
    # Extract error message
    error_message: Optional[str] = None
    if enhanced_result.execution and enhanced_result.execution.error_message:
        error_message = enhanced_result.execution.error_message
    elif not enhanced_result.validation.valid:
        error_message = f"Validation failed: {enhanced_result.validation.reasoning}"
    
    # Create and return JournalActionResult
    return JournalActionResult(
        success=success,
        action=action_type,
        confidence=confidence,
        coordinates=coordinates,
        grid_coordinates=grid_coordinates,
        playwright_command=playwright_command,
        selectors=selectors,
        input_text=input_text,
        element_text=element_text,
        actual_outcome=actual_outcome,
        error_message=error_message
    )


def extract_journal_context(enhanced_result: EnhancedActionResult) -> Dict[str, Any]:
    """
    Extract additional context information for journal entries.
    
    Args:
        enhanced_result: The enhanced action result
        
    Returns:
        Dictionary with additional context for journal entries
    """
    context = {}
    
    # Add browser state information
    if enhanced_result.browser_state_before:
        context["url_before"] = enhanced_result.browser_state_before.url
        context["title_before"] = enhanced_result.browser_state_before.title
        context["viewport_before"] = enhanced_result.browser_state_before.viewport_size
        
    if enhanced_result.browser_state_after:
        context["url_after"] = enhanced_result.browser_state_after.url
        context["title_after"] = enhanced_result.browser_state_after.title
        context["viewport_after"] = enhanced_result.browser_state_after.viewport_size
    
    # Add validation information
    if enhanced_result.validation:
        context["validation_reasoning"] = enhanced_result.validation.reasoning
        context["validation_concerns"] = enhanced_result.validation.concerns
        context["validation_suggestions"] = enhanced_result.validation.suggestions
    
    # Add execution information
    if enhanced_result.execution:
        context["execution_time_ms"] = enhanced_result.execution.execution_time_ms
        context["browser_logs"] = enhanced_result.execution.browser_logs
        context["network_activity"] = enhanced_result.execution.network_activity
    
    # Add AI analysis details
    if enhanced_result.ai_analysis:
        context["ai_ui_changes"] = enhanced_result.ai_analysis.ui_changes
        context["ai_recommendations"] = enhanced_result.ai_analysis.recommendations
        context["ai_anomalies"] = enhanced_result.ai_analysis.anomalies
        context["ai_matches_expected"] = enhanced_result.ai_analysis.matches_expected
    
    # Add screenshot information
    if enhanced_result.grid_screenshot_before:
        context["has_grid_screenshot_before"] = True
        context["grid_screenshot_before_size"] = len(enhanced_result.grid_screenshot_before)
        
    if enhanced_result.grid_screenshot_highlighted:
        context["has_grid_screenshot_highlighted"] = True
        context["grid_screenshot_highlighted_size"] = len(enhanced_result.grid_screenshot_highlighted)
    
    # Add timing information
    context["timestamp_start"] = enhanced_result.timestamp_start.isoformat()
    if enhanced_result.timestamp_end:
        context["timestamp_end"] = enhanced_result.timestamp_end.isoformat()
        duration_ms = (enhanced_result.timestamp_end - enhanced_result.timestamp_start).total_seconds() * 1000
        context["total_duration_ms"] = duration_ms
    
    return context